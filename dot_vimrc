autocmd!

" Vundle stuff
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'mattn/emmet-vim'
Bundle 'groenewege/vim-less'
Bundle 'mustache/vim-mustache-handlebars'
Bundle 'jtratner/vim-flavored-markdown'
Bundle 'scrooloose/nerdtree'
Bundle 'basecase/orgdown'
Bundle 'kchmck/vim-coffee-script'
Bundle 'ctrlpvim/ctrlp.vim'

" basic settings
filetype plugin indent on
set backspace=eol,indent,start
set directory=~/.vim_backup
set backupdir=~/.vim_backup
set hidden
set hlsearch
set ignorecase smartcase
set incsearch
set shell=/bin/bash\ -i " make shell commands load my bash config
set wildignore=*.pyc,*.o,.git,bower_components,node_modules,__pycache__,venv,dist,tmp
set wildmenu
set foldopen-=search
set mouse=a
" don't wrap searches when you hit the bottom or top
" I don't love this, but until I get a vbell on wrap, it's better
set nowrapscan
syntax enable
" disable auto comment insertion on <return>
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" visual customizations
set t_Co=256
set showmode
set ruler
set cmdheight=2
set showtabline=2
set scrolloff=3
set winwidth=80
set cursorline
set background=dark
if has("gui_running")
  set background=light
  set guifont=Menlo:h14
endif
highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=235
let g:ctrlp_match_window = 'max:30'

" whitespace settings
autocmd BufWritePre * :%s/\s\+$//e " delete trailing whitespace on save
set expandtab
set list listchars=tab:â†’.
set shiftwidth=2
set tabstop=2

" custom mappings
let mapleader=","
command! Q q
map <DOWN> <C-E>
map <UP> <C-Y>
map j gj
map k gk
map * *N
map <C-j> 10j
map <C-k> 10k
map <C-]> g<C-]>
map K k
imap <C-d> <C-o>x

" insert directory part of current file's path in minibuffer. stolen from GRB
cnoremap %% <C-R>=expand('%:h').'/'<cr>

map <leader>< :e ~/.local_vimrc<cr>
map <leader>` :set wrap!<cr>
map <leader>c :%w !pbcopy<CR>
map <leader>f :CtrlP<cr>
map <leader>b :CtrlPBuffer<cr>
map <leader>l :set list!<cr>
map <leader>n :e ~/Dropbox/scratch_notes.md<cr>
" in HTML mode, quickly close a tag:
map <leader>/ i</<C-x><C-o><ESC>==
map <leader>z :NERDTreeToggle<cr>

" type-specific configs
autocmd BufNewFile,BufRead *.md setlocal filetype=ghmarkdown
autocmd Filetype ghmarkdown,text setlocal nolist linebreak wrap
autocmd BufNewFile,BufRead local_bash_config setlocal filetype=sh
autocmd Filetype python setlocal shiftwidth=4 tabstop=4
autocmd Filetype c setlocal shiftwidth=4 tabstop=4
autocmd BufNewFile,BufRead *.us set syntax=jst
autocmd Filetype eruby setlocal shiftwidth=2 tabstop=2 expandtab

"""""""""""""""""""""""
" test running helpers
""""""""""""""""""""""""
map <leader><c-t> :call SetCurrentTest()<cr>

" Python version of test runner stuff
function! SetCurrentTest()
    let filename = expand('%')
    let stripped = substitute(filename, '.py', '', '')
    let g:CURRENT_TEST = substitute(stripped, '/', '.', 'g')
    echo "Test is now:"
    echo g:CURRENT_TEST
endfunction

" override this with something that includes "<c-r>=expand(g:CURRENT_TEST)<cr>"
" in your local vim settings
map <leader>t :!clear ; python -m unittest discover<cr>

" local configs that aren't saved in the git repo
source ~/.local_vimrc




" a quick vimscript that will show you all colors available to you and their numbers.
" just copy this, paste it into a buffer, and :so %
"let num = 255
"while num >= 0
"    exec 'hi col_'.num.' ctermbg='.num.' ctermfg=white'
"    exec 'syn match col_'.num.' "ctermbg='.num.':...." containedIn=ALL'
"    call append(0, 'ctermbg='.num.':....')
"    let num = num - 1
"endwhile
